//  ===========================================================================
//  Arduino Stereo Audio Spectrum Analyser - Hardware Used.
//  ===========================================================================
/*

    The L channel is read in through ADC0.
    The R channel is read in through ADC1.
    Output to the WS2812 LED strip is sent from digital pin PD7

	Note:

		The ADC input impedance should be 10k or lower.
		C1/C2 are coupling capacitors to remove the DC component, but form a
		high-pass filter circuit with the resistor network.

    Parts List:

    Arduino Pro Mini 5V/16MHz.
    Breadboard for prototyping/Stripboard for production.

     +5V   GND
      |     |
      |-----(-------------------------,-------,---,
      |     |                         |       |   |
      |     |-------------------------(---,   |   |
      |     |                         |   |   |   |
      |     |          Pro Mini       |   |   |   |
      |     |         [TX0   RAW]-----'   |   |   |
      |     |         [RXI   GND]---------|   |   |
      |     |         [RST   RST]             |   |    
      |     |         [GND   VCC]           [R1] [R3]    
      |     |         [2      A3]             |   |    
      |     |         [3      A2]             |   |   C2          Phono
      |     |         [4      A1]-ADC1--------(---+---||------------o R
      |     |         [5      A0]-ADC0--------+---(---||------------o L       
      |     |         [6      13]       .     |   |   C1    ,-------o GND     
      |     |   ,-PD7-[7      12]             |   |         |
      |     |   |     [8      11]           [R2] [R4]       |
      |     |   |     [9      10]             |   |         |
      |     |   |                             |   |         |
      |     |---(-----------------------------'---'         |
      |     |   |                                           |
      |     |---(-------------------------------------------'
      |     |   |
      |     |   |                                                 WS8212
      |-----(---(---------------------,-----------------------------o +5V
      |     |   |                     |
      |     |   '---------------------(--------------------[R5]-----o Data
      |     |                         |
      |     |-----------------,-------(-----------------------------o GND
      |     |                 |   +   |
      |     |                 '--||---'
     +5V   GND                   C3                                       

      ,-------------------------,
      |   n   |   R    |   C    |
      |-------+--------+--------|
      |   1   | 10kOhm |    1uF |
      |   2   | 10kOhm |    1uF |
      |   3   | 10kOhm | 1000uF |
      |   4   | 10kOhm |        |
      |   5   | 470Ohm |        |
      '-------------------------'
*/
//  ===========================================================================
//  Functional description of the ADC registers.
//  ===========================================================================
/*
  The ADC behaviour is defined by a number of internal registers:

    ,---------------------------------------,
    | Register | Description                |
    |----------+----------------------------|
    | ADCSRA   | ADC Control and Status A.  |
    | ADCSRB   | ADC Control and Status B.  |
    | ADMUX    | ADC Multiplexer Selection. |
    | DIDR0    | Digital Input Disable.     |
    | ADCH     | ADC Data (High).           |
    | ADCL     | ADC Data (Low).            |
    '---------------------------------------' 

    ADCSRA register:
    ,---------------------------------------------------------------,
    |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    |-------+-------+-------+-------+-------+-------+-------+-------|
    | ADEN  | ADSC  | ADFR  | ADIF  | ADIE  | ADPS2 | ADPS1 | ADPS0 |
    '---------------------------------------------------------------'
    ADEN (ADC Enable): 1 = enable, 0 = disable.
    ADSC (ADC Start Conversion): 1 = start, auto set to zero on completion.
    ADFR (ADC Free Running Select): 1 = free running, 0 = single conversion.
    ADIF (ADC Interrupt Flag): Set by hardware.
    ADIE (ADC Interrupt Enable): 1 = enable, 0 = disable.
    ADPS (ADC Prescaler Select Bits): 0-2 used to set clock frequency. 

    ,-----------------,
    |   ADPSn   | Div |
    | 2 | 1 | 0 |     |
    |---+---+---+-----|
    | 0 | 0 | 0 |   2 |
    | 0 | 0 | 1 |   2 |
    | 0 | 1 | 0 |   4 |
    | 0 | 1 | 1 |   8 |
    | 1 | 0 | 0 |  16 |
    | 1 | 0 | 1 |  32 |
    | 1 | 1 | 0 |  64 |
    | 1 | 1 | 1 | 128 |
    '-----------------'

    ADCSRB register:
    ,---------------------------------------------------------------,
    |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    |-------+-------+-------+-------+-------+-------+-------+-------|
    |   -   | ACME  |   -   |   -   |   -   | ADTS2 | ADTS1 | ADTS0 |
    '---------------------------------------------------------------'

    ACME (Analog Comparator Mux Enable): 1 = enable, 0 = disable.
    ADTSn (ADC Trigger Select bits):
    ,---------------------------------------------,
    |   ADTSn   | Trigger Select.                 |
    | 2 | 1 | 0 |                                 |
    |---+---+---+---------------------------------|
    | 0 | 0 | 0 | Free Running.                   |
    | 0 | 0 | 1 | Analog Comparator.              |
    | 0 | 1 | 0 | External Interrupt Request 0.   |
    | 0 | 1 | 1 | Timer/Counter0 Compare Match A. |
    | 1 | 0 | 0 | Timer/Counter0 Overflow.        |
    | 1 | 0 | 1 | Timer/Counter1 Compare Match B. |
    | 1 | 1 | 0 | Timer/Counter1 Compare Match A. |
    | 1 | 1 | 1 | Timer/Counter1 Capture Event.   |
    '---------------------------------------------'

    ADMUX register:
    ,---------------------------------------------------------------,
    |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    |-------+-------+-------+-------+-------+-------+-------+-------|
    | REFS1 | REFS0 | ADLAR |   -   | MUX3  | MUX2  | MUX1  | MUX0  |
    '---------------------------------------------------------------'

    REFSn (Set reference voltage):
    ,-----------------------------------------------------------,
    | REFSn |                                                   |
    | 1 | 0 | Vref selection.                                   |
    |---+---+---------------------------------------------------|
    | 0 | 0 | AREF, Internal Vref turned off.                   |
    | 0 | 1 | AVcc with external cap on AREF pin.               |
    | 1 | 0 | Reserved.                                         |
    | 1 | 1 | Internal 1.1V (ATmega168/328) or 2.56V (ATmega8). |
    '-----------------------------------------------------------'

    ADLAR (ADC Left Adjust Result):
    ,------------------------------------------------------------------------,
    | ADLAR |           ADCH                ||           ADCL                |
    |       | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 || 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
    |-------+---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---|
    |   0   | - | - | - | - | - | - | * | * || * | * | * | * | * | * | * | * |
    |   1   | * | * | * | * | * | * | * | * || * | * | - | - | - | - | - | - |
    '------------------------------------------------------------------------'

    MUXn (Analog Channel Selection Bits): Select analog ports ADC0-ADC5.
    ,-----------------------,
    |      MUXn     | Input |
    | 3 | 2 | 1 | 0 |       |
    |---+---+---+---+-------|
    | 0 | 0 | 0 | 0 | ADC0  |
    | 0 | 0 | 0 | 1 | ADC1  |
    | 0 | 0 | 1 | 0 | ADC2  |
    | 0 | 0 | 1 | 1 | ADC3  |
    | 0 | 1 | 0 | 0 | ADC4  |
    | 0 | 1 | 0 | 1 | ADC5  |
    '-----------------------'
    
    DIDR0 register:
    ,---------------------------------------------------------------,
    |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    |-------+-------+-------+-------+-------+-------+-------+-------|
    |   -   |   -   | ADC5D | ADC4D | ADC3D | ADC2D | ADC1D | ADC0D |
    '---------------------------------------------------------------'
    When set, the corresponding digital input buffer is disabled.

    DIDR1 register:
    ,---------------------------------------------------------------,
    |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    |-------+-------+-------+-------+-------+-------+-------+-------|
    |   -   |   -   |   -   |   -   |   -   |   -   | AIN1D | AIN0D |
    '---------------------------------------------------------------'
    When set, the corresponding digital input buffer is disabled.
*/

//  ===========================================================================
//  Settings.
//  ===========================================================================

//  Divisor -------------------------------------------------------------------
/*

    The Arduino ADC runs at a clock rate determined by the divisor, which is
    set to 64 by default, i.e. the ADC runs at 1/64 of the full clock rate.
    Changing te divisor is as simmple as setting the ADPSn registers:

    Typical audio range = 20Hz - 20kHz (Target is 20kHz).
    Arduino clock = 16MHz.
    ADC capture takes 13 cycles.
    Nyquist Effective Bandwidth = Sample Frequency / 2.
    Therefore approx bandwidth = 16000000/(div*13*2) 

            ,-----------------------------,
            |   ADPSn   | Div | Bandwidth |
            | 2 | 1 | 0 |     |   (Hz)    |
            |---+---+---+-----+-----------|
            | 0 | 0 | 0 |   2 |  307692   |
            | 0 | 0 | 1 |   2 |  307692   |
            | 0 | 1 | 0 |   4 |  153846   |
            | 0 | 1 | 1 |   8 |   76923   |
            | 1 | 0 | 0 |  16 |   38461   |
            | 1 | 0 | 1 |  32 |   19230   |<--Closest - use this!
            | 1 | 1 | 0 |  64 |    9615   |
            | 1 | 1 | 1 | 128 |    4807   |
            '-----------------------------'
*/
//  FHT -----------------------------------------------------------------------
/*
  FHT output settings. These are mutually exclusive and affect which
  variables and outputs are available.
*/
#define LIN_OUT      0  // Toggle linear output (word).
#define LIN_OUT8     0  // Toggle linear output (byte).
#define LOG_OUT      1  // Toggle logarithmic output (byte).
#define OCTAVE       0  // Toggle octave output (byte).
/*
  FHT_OUT is normally FHT_N/2, except for OCTAVE output where
  FHT_OUT = 8 for FHT_N = 256,
  FHT_OUT = 7 for FHT_N = 128.
*/
#define FHT_N      128  // Number of FHT input bins per channel.
#define FHT_OUT     64  // Number of FHT output bins per channel.

//  Display -------------------------------------------------------------------
/*
    The settings determine the output that is displayed.
*/
#define CHANNELS        2 // Number of audio channels.
#define FREQ_BANDS      8 // Number of frequency bands per channel.
#define FREQ_LEDS      15 // Number of LEDS representing each band.
#define LED_DATA_PIN    7 // Data pin for WS2812 LED strip.
#define INIT_BRIGHT    50 // Initial LED brightness.
#define INIT_REFRESH 50000 // Initial refresh time for LEDs.

/*
    There are typically more output bins than can be displayed. For the
    display, each frequency band can cover a number of bins so there are a
    few options available:

    1) Average or RMS the bins over each frequency band. This is likely to
       have a significant overhead of cycles to complete and may slow down
       the overall processing too much.
    2) Display the maximum of all bins within the frequency band. This is
       likely to have relatively little overhead but the frequency bands
       would all be fixed in size and position.
    3) Specify the frequencies to display by calculating the specific bin
       positions of those frequencies. Probably the best option in terms of
       performance but also allows a lot more customisation. This option
       is implemented here as function getbands(). The bands can be weighted
       or equispaced:

    The frequency of a particular bin, i, is found from:
    
              f = i * Sample Rate / FHT_N

    Therefore, the bin number for a particular frequency can be found from:

              i = f * FHT_N / ( 2 * Sample Rate )

    A starting point for picking suitable frequencies over a fixed range
    can be calculated with the following formula (based on linear FHT output):

              fn = n * ( fe/fs )^((n-1)/(N-1))
    where

      fn = the frequency at ordinate n (from 1 to N).
      N  = the number of frequencies to display.
      fs = the starting frequency.
      fe = the end frequency.

    For a nominal frequency range of 60Hz (fs) - 18kHz (fe) over 8 ordinates,
    FHT_N = 128 & Sample Rate = 19230Hz (based on a divider of 32):

                      ,-----------------,
                      | x | f(Hz) | bin |
                      |---+-------+-----|
                      | 1 |    60 |   0 |
                      | 2 |   136 |   1 |
                      | 3 |   306 |   2 |
                      | 4 |   691 |   3 |
                      | 5 |  1562 |   5 |
                      | 6 |  3528 |  12 |
                      | 7 |  7969 |  27 |
                      | 8 | 18000 |  60 |
                      '-----------------'
*/


